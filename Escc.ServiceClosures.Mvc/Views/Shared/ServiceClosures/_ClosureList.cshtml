@using Escc.ServiceClosures
@using System.Collections.ObjectModel
@using Escc.Dates
@model Escc.ServiceClosures.Mvc.IServiceClosureListViewModel
@functions {
    Dictionary<int, Service> AddClosureListItems(ClosureStatus? status)
    {
        var filteredList = new Dictionary<int, Service>();

        foreach (Service service in Model.Services)
        {
            // If a specific date is set, it's going to be on a page designed to show current status of service,
            // rather than a programme of events.
            if (Model.TargetDay.HasValue)
            {
                // Could be multiple closures of one service for the same day. For example, in a school
                // the infant section could be closed all day and the junior section closed in the afternoon only.
                Collection<Closure> currentClosures = service.CheckForClosures(Model.TargetDay.Value);

                if (currentClosures.Count > 0)
                {
                    foreach (Closure closure in currentClosures)
                    {
                        // Beacause the list might be grouped by status, only show if the status
                        // matches (otherwise it'll show multiple times - once for each status)
                        if (status == null || status == closure.Status)
                        {
                            // Only show the closure if the relevant "ShowXXX" property is true
                            if ((Model.ShowEmergencyClosures && closure.Reason.Emergency) ||
                            (Model.ShowPlannedClosures && !closure.Reason.Emergency))
                            {
                                if (!filteredList.ContainsKey(service.Id)) { filteredList.Add(service.Id, new Service() { Name = service.Name, Url = service.Url, Type = service.Type }); }
                                filteredList[service.Id].Closures.Add(closure);
                            }
                        }
                    }
                }
            }
            else
            {
                // If we're not limited to closures on a specific date, we can just show all the closures for the service.
                foreach (Closure closure in service.Closures)
                {
                    // ...unless FutureOnly is set, then skip anything in the past
                    if (Model.FutureOnly && closure.EndDate < DateTime.Today) continue;

                    // ...and still be careful not to list multiple times when grouping by status
                    if (status == null || status == closure.Status)
                    {
                        if (!filteredList.ContainsKey(service.Id)) { filteredList.Add(service.Id, new Service() { Name = service.Name, Url = service.Url }); }
                        filteredList[service.Id].Closures.Add(closure);
                    }
                }
            }
        }
        return filteredList;
    }
}
@{
    string when = String.Empty;
    if (Model.TargetDay.HasValue && Model.TargetDay.Value == DateTime.Today) { when = " today"; }
    else if (Model.TargetDay.HasValue && Model.TargetDay.Value == DateTime.Today.AddDays(1)) { when = " tomorrow"; }
    else if (Model.TargetDay != null) { when = " on " + Model.TargetDay.Value.ToBritishDateWithDay(); }

    // Create a list each for services that are confirmed partly closed, closed or have not provided information.
    // Typical use might be in severe weather, when you might assume a service is closed unless it says it's open.
    if (Model.GroupByClosureStatus)
    {
        var partlyClosed = AddClosureListItems(ClosureStatus.PartlyClosed);
        if (partlyClosed.Count > 0)
        {
            <h2>Confirmed <strong>partly closed</strong>@when</h2>
            <ol class="closureList">
                @foreach (var serviceId in partlyClosed.Keys)
                {
                    @Html.Partial("~/Views/Shared/ServiceClosures/_ClosureListItem.cshtml", partlyClosed[serviceId])
                }
            </ol>
        }

        var closed = AddClosureListItems(ClosureStatus.Closed);
        if (closed.Count > 0)
        {
            <h2>Confirmed <strong>closed</strong>@when</h2>;
            <ol class="closureList">
                @foreach (var serviceId in closed.Keys)
                {
                    @Html.Partial("~/Views/Shared/ServiceClosures/_ClosureListItem.cshtml", closed[serviceId])
                }
            </ol>
        }
    }
    else
    {
        // Alternatively just display a simple list of all closures.
        // Typical use is all closures for a given service location
        var all = AddClosureListItems(null);
        if (all.Count > 0)
        {
            if (Model.ShowHeading)
            {
            <h2>Confirmed <strong>closed</strong> or <strong>partly closed</strong>@when</h2>
            }
            <ol class="closureList">
                @foreach (var serviceId in all.Keys)
                {
                    @Html.Partial("~/Views/Shared/ServiceClosures/_ClosureListItem.cshtml", all[serviceId])
                }
            </ol>
        }
    }
}